# ===============================
# = DATA SOURCE: Produção no heroku - DB PostgreSQL
# ===============================

#spring.datasource.url=${DATABASE_URL}
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.validationQuery = SELECT 1

#____________________________________________________________________________________________________#

# ===============================
# = DATA SOURCE: Configuração Local - DB PostgreSQL
# ===============================

spring.datasource.url= jdbc:postgresql://localhost:5432/devweb_catalogo
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.validationQuery = SELECT 1

#____________________________________________________________________________________________________#

# ===============================
# = DATA SOURCE: Configuração Local - DB MySQL
# ===============================
#spring.datasource.url = jdbc:mysql://localhost:3306/spring-security-tutorial
#spring.datasource.username = root
#spring.datasource.password = root
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
spring.jpa.show-sql = true
#utilizar apenas no primeiro deploy pra gerar o banco de dados
#spring.jpa.generate-ddl=true

#Opçoes: create-drop / update
spring.jpa.hibernate.ddl-auto = update
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL94Dialect


# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder  
# ==============================================================

spring.queries.users-query=select email, password, ativo from seg_usuario where email=?
spring.queries.roles-query=select u.email, r.role from seg_usuario u inner join seg_usuario_role ur on(u.id_usuario=ur.id_usuario) inner join seg_role r on(ur.id_role=r.id_role) where u.email=?


